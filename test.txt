// src/components/BusinessInsightsSection.jsx
import React from "react";
import {
  Card,
  Collapse,
  Typography,
  Tag,
  Progress,
  Space,
  Alert,
  Tooltip,
} from "antd";
import {
  ClusterOutlined,
  LineChartOutlined,
  BulbOutlined,
  CheckCircleOutlined,
  WarningOutlined,
} from "@ant-design/icons";

const { Title, Paragraph } = Typography;
const { Panel } = Collapse;

// Helper to handle parsing and rendering of specific parts of the report.
const renderInsightLine = (text) => {
  if (text.startsWith("‚úÖ")) {
    return (
      <Tag icon={<CheckCircleOutlined />} color="success">
        {text.substring(1).trim()}
      </Tag>
    );
  }
  if (text.startsWith("‚ö†Ô∏è") || text.startsWith("üö®")) {
    return (
      <Tag icon={<WarningOutlined />} color="warning">
        {text.substring(1).trim()}
      </Tag>
    );
  }
  return <p>{text.trim()}</p>;
};

// Main component for the Business Insights section.
const BusinessInsightsSection = ({ content }) => {
  if (!content || content.length === 0) {
    return (
      <Alert
        message="Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n t√≠ch chuy√™n s√¢u."
        description="H√£y ƒë·∫£m b·∫£o d·ªØ li·ªáu c·ªßa b·∫°n ƒë·ªß l·ªõn v√† c√≥ c√°c thu·ªôc t√≠nh ph√π h·ª£p ƒë·ªÉ th·ª±c hi·ªán ph√¢n t√≠ch n√¢ng cao."
        type="info"
        showIcon
      />
    );
  }

  // A more robust parser to handle the different insight types.
  const parseInsights = (lines) => {
    const insights = {
      segmentation: { header: null, groups: [] },
      timeSeries: { header: null, details: [] },
      keyDrivers: { anova: [], chi2: [] },
    };

    let currentSection = null;
    let anovaKey = null;
    let chi2Key = null;

    lines.forEach((line) => {
      const trimmedLine = line.trim();

      if (trimmedLine.startsWith("- D·ªØ li·ªáu ƒë∆∞·ª£c ph√¢n chia")) {
        currentSection = "segmentation";
        insights.segmentation.header = trimmedLine.replace(/^- /, "");
      } else if (trimmedLine.startsWith("- Ph√¢n t√≠ch chu·ªói th·ªùi gian")) {
        currentSection = "timeSeries";
        insights.timeSeries.header = trimmedLine.replace(/^- /, "");
      } else if (trimmedLine.startsWith("- ‚úÖ Ki·ªÉm ƒë·ªãnh ANOVA")) {
        currentSection = "keyDrivers";
        anovaKey = trimmedLine; // Use the main finding as a key
        insights.keyDrivers.anova.push({ main: anovaKey, details: [] });
      } else if (trimmedLine.startsWith("- ‚úÖ Ki·ªÉm ƒë·ªãnh Chi-square")) {
        currentSection = "keyDrivers";
        chi2Key = trimmedLine; // Use the main finding as a key
        insights.keyDrivers.chi2.push({ main: chi2Key, details: [] });
      } else if (
        currentSection === "segmentation" &&
        trimmedLine.startsWith("Nh√≥m")
      ) {
        insights.segmentation.groups.push(trimmedLine);
      } else if (
        currentSection === "timeSeries" &&
        (trimmedLine.startsWith("C√≥ t√≠nh m√πa v·ª•") ||
          trimmedLine.startsWith("Xu h∆∞·ªõng") ||
          trimmedLine.startsWith("Ph√°t hi·ªán"))
      ) {
        insights.timeSeries.details.push(trimmedLine);
      } else if (
        currentSection === "keyDrivers" &&
        trimmedLine.startsWith("‚Üí")
      ) {
        if (anovaKey) {
          insights.keyDrivers.anova[
            insights.keyDrivers.anova.length - 1
          ].details.push(trimmedLine);
        } else if (chi2Key) {
          insights.keyDrivers.chi2[
            insights.keyDrivers.chi2.length - 1
          ].details.push(trimmedLine);
        }
      }
    });
    return insights;
  };

  const parsedInsights = parseInsights(content);

  return (
    <div className="insights-grid">
      {/* === Segmentation Section === */}
      {parsedInsights.segmentation.header && (
        <Card
          title={
            <Space>
              <ClusterOutlined /> Ph√¢n kh√∫c ƒë·ªëi t∆∞·ª£ng
            </Space>
          }
          className="insights-card">
          <Paragraph className="card-description">
            {parsedInsights.segmentation.header}
          </Paragraph>
          <Collapse ghost>
            <Panel header="Xem chi ti·∫øt c√°c nh√≥m" key="1">
              <ul className="cluster-list">
                {parsedInsights.segmentation.groups.map((group, index) => (
                  <li key={index} className="cluster-item">
                    {renderInsightLine(group)}
                  </li>
                ))}
              </ul>
            </Panel>
          </Collapse>
        </Card>
      )}

      {/* === Time Series Section === */}
      {parsedInsights.timeSeries.header && (
        <Card
          title={
            <Space>
              <LineChartOutlined /> Ph√¢n t√≠ch Chu·ªói Th·ªùi gian
            </Space>
          }
          className="insights-card">
          <Paragraph className="card-description">
            {parsedInsights.timeSeries.header}
          </Paragraph>
          <ul className="ts-insights-list">
            {parsedInsights.timeSeries.details.map((detail, index) => (
              <li key={index}>{renderInsightLine(detail)}</li>
            ))}
          </ul>
        </Card>
      )}

      {/* === Key Drivers Section === */}
      {(parsedInsights.keyDrivers.anova.length > 0 ||
        parsedInsights.keyDrivers.chi2.length > 0) && (
        <Card
          title={
            <Space>
              <BulbOutlined /> C√°c Y·∫øu T·ªë T√°c ƒê·ªông
            </Space>
          }
          className="insights-card">
          <Collapse ghost>
            {/* ANOVA Insights */}
            {parsedInsights.keyDrivers.anova.map((insight, index) => (
              <Panel
                header={renderInsightLine(insight.main)}
                key={`anova-${index}`}>
                <Paragraph className="explanation-text">
                  {insight.details.join(" ")}
                </Paragraph>
              </Panel>
            ))}
            {/* Chi-square Insights */}
            {parsedInsights.keyDrivers.chi2.map((insight, index) => (
              <Panel
                header={renderInsightLine(insight.main)}
                key={`chi2-${index}`}>
                <Paragraph className="explanation-text">
                  {insight.details.join(" ")}
                </Paragraph>
              </Panel>
            ))}
          </Collapse>
        </Card>
      )}
    </div>
  );
};

export default BusinessInsightsSection;
